
# f8_text_file
# (an f8_text_file is-not meant to be run as a whole)
)
exit

(selected lines from this file can be run in a terminal ... e.g. by the F8 key, customly bound to runSelectedText  )


// ohayo.f8.ohayo
// see also ohayo--install.f8.sh


=========

todo

node

const { jtree } = require("jtree")
jtree
require("jtree")
x=jtree.TreeNode
y=new x("a\n b")
z=y._children[0]

=============

)

tile.name args


tile.name args
 optnodot args
 optnodot args

tile.namefilter1 args
 optnodot args
 optnodot args
 tile.namefilter2 args
  optnodot args


 data.inline
  content
   SUBTREE1


   data.localStorage find.csv
   parser list
   tables.basic
   text.reverseSplit name . ext
    tables.basic
     doc.comment filter.with /
     doc.comment columns.keep ext
     doc.comment tables.basic
     doc.comment text.wordCount
    group.by ext
     tables.basic
     rows.sortByReverse count
      tables.basic

data.localStorage find.csv
 parser list
 tables.basic
 text.reverseSplit name . ext
  tables.basic
  doc.comment filter.with /
  columns.keep ext
   tables.basic
   doc.comment text.wordCount
   group.by ext
    tables.basic
    rows.sortByReverse count
     tables.basic




Maybe I should compare the Ohayo language also to SQL or to shell+textutils or to Scipy

https://hyperpolyglot.org/numerical-analysis2

(https://docs.google.com/spreadsheets/d/1w4MAxWcWjX3aMBRkOsqjwcAabFtY4WT4JloPRd944og)
----





============
what I tried to tweak



data.inline
 parser csv
 content
  a,b
  r0,r2
  r4,r2
  r4,r2
  r7,r2
 tables.basic
 data.eval
  content
   x => { console.log(x);
    return x.reverse()  }
  tables.basic

 data.eval
  content
   x => { console.log(x);
    return x.reverse()  }
  tables.basic





  x => { glo++;
    console.log(glo);console.log(x);
    return x.reverse()  }



   x => { glo++;
    console.log(glo);console.log(x);
    return [{a:x[0].a,b:2}]}


   x => {return x}



   [{c:x[0].a,d:2}]

   [[{c:x[0].a,d:2}]]

   {c:x[0].a,d:2} fail


   x => { console.log(x);
    return [[0],[2]]
    }

    return [[0,6],[2,7]]


    return [[[[0,46],[2,7]]]]


    data.inline
    parser jsonMap
    content
     {"r4,r2":"ww","d":"sss"}

     data.inline
     parser jsonMap
     content
      {"r4,r2":[7,88],"d":"sss"}
     tables.basic

     data.inline
 parser jsonMap
 content
  [{"q":7},"b",[7,88],"a","sss"]
 tables.b


    data.inline
    parser tree
    content
     <gfgfd>
     <a> b 25
     r0,r2 12
     r4,r2 21
      7 </a>
       8
     r7,r2 11
       </gfgfd>
    tables.basic
    data.eval
     content
      x => { console.log(x);
        return x
       }









editor.commandHistory
 print.text
 debug.dump
 tables.dump
 tables.basic
 list.basic command
 schema.toTypescript
  tables.basic




samples.list
 doc.comment dfds
  dsff
   dsfsf
    dsf
samples.starWars



samples.declaration
 tables.basic
  text.length text
   tables.basic
   tables.basic
 doc.comment
  text.toLowerCase text
  text.wordCount
   filter.where word = people
    show.max count Count


================================

doc.title Ohayo Grammar Analysis
doc.categories ohayo
debug.ohayoGrammar
 print.text
 text.lineCount
  tables.basic
  show.max lines
 text.wordCount
  tables.basic
  hidden
  show.sum count Ohayo Total Grammar Words
  show.rowCount Ohayo Unique Words
  text.wordcloud
 text.wordCount
  hidden
  rows.sortByReverse count
   hidden
   rows.first 10
    hidden
    tables.basic

================================================================================
https://www.reddit.com/r/treenotation/comments/pwj815/a_comparison_between_javascript_syntax_and_ohayo/

a comparison between JavaScript syntax and Ohayo syntax?
I think about making a small table at Reddit
I would begin with

https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats#Syntax_comparison_of_human-readable_formats

example: string literal

JavaScript: "A to Z"

Ohayo:

my guess is: A to Z
example: array literal

JavaScript: [true, null, -42.1e7, "A to Z"]

Ohayo:

my guess is:

data.inline
 parser tsv
 content
  mycolname1
  true
  null
  -42.1e7
  A to Z


example: Associative array/Object literal

JavaScript: {flag42: true, array186: [1, 2, 3]}

Ohayo:
my new guess is:

data.inline
 parser treeRows
 content
  row
   flag42 true
   array186
    1
    2
    3
or

data.inline
 parser treeRows
 content
  row
   flag42 true
   array186 1 2 3
my old guess was:

data.inline
 parser json
 content
  {"flag42": true, "array186": [1, 2, 3]}
-----------

BTW, there is a good autocompletion in the Ohayo programming language editor.
-----------

Maybe I should compare the Ohayo language also to SQL or to shell+textutils or to Scipy

https://hyperpolyglot.org/numerical-analysis2

(https://docs.google.com/spreadsheets/d/1w4MAxWcWjX3aMBRkOsqjwcAabFtY4WT4JloPRd944og)
----
















=======================
Ohayo syntax and Javascript syntax are very different at the moment, as Ohayo is designed specifically for back-of-the-envelope data science tasks. I did not add loops, or identifiers, or imports, or other constructs like that to the general Ohayo language.
Ohayo is just Tiles and Tile Properties. Tile Properties can be any string at all, and it's up to the Tile implementations (written in Javascript/Typescript) to parse the content into the necessary data structures.
So in your example:

data.inline
 parser tsv
 content
  mycolname1
  true
  null
  -42.1e7
  A to Z
The data.inline Tile is responsible for parsing the content string however it wants. In other words, Ohayo the language is very lightweight at the moment. The best comparison would probably be bash/shells with pipe operators, with Tiles communicating instead of processes. Another big inspiration was dplyr.

Tiles communicate via data tables. So the only real data structure would be data tables. Hence, there wouldn't be a good mapping of {flag42: true, array186: [1, 2, 3]} into Ohayo. All of the formats assume your data maps nicely into tables.

^ Implemented through the JTable library (https://github.com/publicdomaincompany/jtree/tree/main/jtable). A worthwhile move might be to switch that to OWID's CoreTable or UW's Arquero

























=============================================================================
snippets
copied
from the original




https://v20.ohayo.computer/


       vega.bar Proportion of Languages Created With Semantic Indentation by Year
        xColumn appeared
        yColumn count
        colorColumn indents

vega.data movies.json
 columns.keep Title IMDB_Rating
  filter.where IMDB_Rating > 0
   rows.sortBy IMDB_Rating
    rows.reverse
     tables.basic


html.h1 Which programming languages use indentation?
web.get https://pldb.com/pldb.csv
 filter.where appeared > 1950
  columns.keep appeared title features.hasSemanticIndentation
   columns.setType appeared year
    columns.rename features.hasSemanticIndentation indents
     fill.missing indents false
      tables.basic
      group.by indents
       tables.basic
       vega.bar Languages and Semantic Indentation
      group.by indents appeared
       tables.basic
       vega.bar Proportion of Languages Created With Semantic Indentation by Year
        xColumn appeared
        yColumn count
        colorColumn indents
      filter.where indents = true
       group.by appeared
        vega.bar How many Languages with Semantic Indentation Created By Year
         yColumn count






doc.title Ohayo Product Stats
doc.categories ohayo
templates.list
 hidden
 show.rowCount Number of Templates
debug.ohayoGrammar
 hidden
 text.matches string dataDomain
  hidden
  show.max count Number of Integrated Web Data Sources
challenge.list
 show.rowCount Number of Challenges
debug.ohayoGrammarTree
 print.text
 text.lineCount
  hidden
  show.max lines Number of Ohayo Nodes
doc.comment show.static 2 Number of 0 Included Datasets
doc.comment show.static 2 Number of Datasets on Datasets.ohayo.computer
debug.ohayoGrammar
 hidden
 text.lineCount
  hidden
  show.max lines Ohayo Grammar Lines of Code
 text.wordCount
  hidden
  show.sum count Ohayo Total Grammar Words
  show.rowCount Ohayo Unique Words
doc.comment Todo: show.static 2 Ohayo Grammar Lines of Javascript Code
challenge.play 2









doc.title Desktop Only: Statistics for Local Git Repo
web.get http://localhost:2222/shell?command=gitlog
 date.addColumns
  group.by day
   calendar.heat
    count count
   show.median count Median Commits Per Coding Day
   show.rowCount # Coding Days
  group.by month
   vega.line Monthly Commit Trends
    xColumn month
    yColumn count
   vega.bar Days worked by month
    xColumn month
    yColumn count
 show.rowCount Total Commits
 show.max time Most Recent Commit
 show.min time First Commit
doc.categories programming






doc.title GitHub Comparison
doc.subtitle A comparison of Ohayo with RStudio and Jupyter Notebook.
github.info rstudio/rstudio jupyter/notebook treenotation/ohayo
 hidden
 vega.bar Stars Comparison
  yColumn stargazers_count
 vega.scatter Stars by Year Created
  xColumn created_at
  yColumn stargazers_count
doc.categories programming



doc.title Desktop Only: Analyze lines of code in a folder
web.get /disk?path=/ohayo/studio&lineStats=true&recursive=true
 filter.without .DS_Store min.js node_modules ignore package-lock.json
  show.sum lines Total LoC
  columns.keep name extension lines words bytes wordsPerLine
   rows.sortByReverse lines
    tables.basic All files
  group.by extension
   reduce words sum words
   reduce bytes sum bytes
   reduce lines sum lines
   vega.bar Lines of Code
    yColumn lines
   vega.bar Words
    yColumn words
   tables.basic Top Extensions
doc.categories programming


challenge
 id 4
 question In the sample dataset "waterBill", what is the median monthly water bill?
 answer 65.03
 difficulty easy
 solution
  samples.waterBill
   columns.describe
    columns.keep Column median
     tables.basic
challenge
 id 5
 question In the Declaration of Independence, how many times does the word "people" appear, including when capitalized?
 answer 10
 difficulty medium
 solution
  samples.declaration
   text.toLowerCase text
    text.wordCount
     filter.where word = people
      show.max count Count

testProgram linecount.ohayo
 data.inline
  content
   hello world
   hello world
  text.wordCount
   tables.basic
  text.lineCount
   tables.basic



testProgram outline.ohayo
 data.inline
  content
   person
    name breck
    age 33
  treenotation.outline
  treenotation.dotline




testProgram join.ohayo
 data.inline
  parser csv
  content
   email,name
   breck7@gmail.com,Breck Yunits
   cam@gmail.com,Cam
  data.inline
   parser csv
   content
    email,score
    breck7@gmail.com,100
    cam@gmail.com,800
   join.by email
    tables.basic




testProgram jssource.ohayo
 data.eval
  content
   rows => [{name: 2, age: 3}]



testProgram simple.ohayo
 data.inline
  content
   name,age,score
   bob,23,12
   mike,32,32
   bobby,32,12
  filter.with bob
   group.by name
    tables.basic

doc.title Word Cloud
data.inline
 text.wordCount
  text.wordcloud
  rows.sortByReverse count
   tables.basic
 parser text
 content
  If you put some text here, you will make yourself a word cloud. The more text you add, the better it will be. So keep writing, writing, writing, and you will get something that looks good.
doc.categories writing


===============================
found in src


primitiveTypeCell
 highlightScope constant.numeric
 description In Ohayo, all columns have a primitive type chosen from one of these. The type affects how the values in the column are understood and displayed. For example, a 0 could be interpretted as a "false", the number 0, or a string "0". Ohayo attempts to choose the correct type, but you can override the default with the columns.setType tile.
 enum boolean code date day dir feet hour hourMinute html int millisecond minute month monthDay number numberString object path second string text url usd week year


 rogrammingLanguageNameCell
 enum javascript latex css html ruby rust python csv tsv xml php typescript lisp swift java c cpp markdown bash
 highlightScope constant




 async changeWordsAndRenderCommand(value, index) {
  index = parseInt(index)
  const edgeSymbol = this.getEdgeSymbol()
  const words = this.getWords().slice(0, index)
  this.setLine(words.concat(value.split(edgeSymbol)).join(edgeSymbol))
  await this._runAfterTileUpdate(this)
 }




 textSplitNode
 description Split one column into multiple by a string
 cells tileKeywordCell columnNameCell delimiterCell
 catchAllCellType newColumnNamesCell
 example Split a filename into name and extension
  vega.data descriptions.json
   text.split filename . name extension
    tables.basic
 string dummyDataSetName poem
 javascript
  // note: delimiter can probably be ""
  // todo: how would we split on a space???
  // perhaps its better to use getContent() as delimiter, and if you want to name the columns, you can do that later?
  getNewColumns() {
   const sourceColumnName = this.getWord(1)
   const delimiter = this.getWord(2)
   const destinationColumns = this.getWordsFrom(3)
   return destinationColumns.map((destinationColumnName, index) => {
    return {
     source: sourceColumnName,
     name: destinationColumnName,
     accessorFn: row => {
      const words = row[sourceColumnName].split(delimiter)
      return this.reverseSplit ? words.reverse()[index] : words[index]
    }
    }
   })
   return [
    {
     source: sourceColumnName,
     name: destinationColumnName,
     accessorFn: row => row[sourceColumnName].length
    }
   ]
  }
 extends abstractColumnAdderTileNode
 crux text.split
reverseTextSplitNode
 extends textSplitNode
 crux text.reverseSplit
 description Split one column into multiple by a string reversing the order.
 boolean reverseSplit true






 doc.title Most Popular Top Level Domains
 doc.categories web
 doc.subtitle This script looks at the top 500 domain names. It then extracts the TLD and groups them. The conclusion is that .com is the most popular by about 10x.
 moz.top500
  hidden
  text.reverseSplit RootDomain . tld
   hidden
   tables.basic
   group.by tld
    hidden
    rows.sortByReverse count
     hidden
     tables.basic
     vega.bar .com is the most popular TLD by nearly 10x.





 async _addLineStatsForFile(file) {
  const str = await fs.readFile(file.path, "utf8")
  //file.content = str
  const lines = str.match(/\n/g)
  const words = str.split(/\b/g)
  file.lines = lines ? lines.length : 1
  file.words = words ? Math.round(words.length / 2) : 0
  file.wordsPerLine = (file.words / file.lines).toFixed(1)
  return file
}









section Running Ohayo Programs on the Command Line

paragraph
 Ohayo programs are designed to be run visually in the browser but you can also run Ohayo programs headless on the command line for things like cron job reports and testing. The program below:

code
 #! /usr/bin/env node /usr/local/bin/jtree
 samples.presidents
  filter.where HomeState = Illinois
   print.csv

paragraph
 Prints this output:

code
 name,number,link,TookOffice,Leftoffice,Party,HomeState
 Abraham Lincoln,16,http://en.wikipedia.org/wiki/Abraham_Lincoln,-3434275714000,-3304416514000,Republican/National Union,Illinois
 Barack Obama,44,http://en.wikipedia.org/wiki/Barack_Obama,1232445600000,NaN,  Democratic   ,Illinois
